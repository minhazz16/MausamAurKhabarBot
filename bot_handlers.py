# ЁЯСЗ рдиреАрдЪреЗ рдкреВрд░рд╛ рд╕рд╣реА рдХрд┐рдпрд╛ рдЧрдпрд╛ рдХреЛрдб рд╣реИ:
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from weather import get_weather, check_weather_alerts
from news import get_news
import random
from subscriptions import add_subscriber, update_city, unsubscribe, is_subscribed, get_user_prefs, set_alert_preference, get_all_subscribers
import datetime
import json
import zoneinfo
from subscriptions import get_user_profile
import os
from dotenv import load_dotenv

load_dotenv()
ADMIN_ID = int(os.getenv("ADMIN_ID"))


# ЁЯОЙ Fun Facts
def load_fun_facts():
    try:
        with open('fun_facts.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"тЪая╕П Fun facts рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")
        return ["ЁЯМЯ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рддрдереНрдп: рд╕реАрдЦрддреЗ рд░рд╣рдирд╛ рдЬрд╛рд░реА рд░рдЦреЗрдВ!"]

def get_fun_fact():
    return random.choice(load_fun_facts())

# ЁЯМЖ рд╕рд┐рдЯреА рдЪреБрдирдиреЗ рдХрд╛ рдЗрдирд▓рд╛рдЗрди рдХреАрдмреЛрд░реНрдб (рд╕рднреА рдХрдорд╛рдВрдбреНрд╕ рдХреЗ рд▓рд┐рдП)
def get_city_keyboard(command_type):
    keyboard = [
        [InlineKeyboardButton("ЁЯУН Mehsi", callback_data=f"{command_type}_Mehsi")],
        [InlineKeyboardButton("ЁЯУН Gaya", callback_data=f"{command_type}_Gaya")],
        [InlineKeyboardButton("ЁЯУН Patna", callback_data=f"{command_type}_Patna")],
        [InlineKeyboardButton("ЁЯУН Delhi", callback_data=f"{command_type}_Delhi")],
        [InlineKeyboardButton("ЁЯУН Mumbai", callback_data=f"{command_type}_Mumbai")],
        [InlineKeyboardButton("ЁЯУН Kolkata", callback_data=f"{command_type}_Kolkata")],
        [InlineKeyboardButton("ЁЯУН Jaipur", callback_data=f"{command_type}_Jaipur")],
        [
            InlineKeyboardButton("тЬПя╕П рдЕрдкрдиреА рд╕рд┐рдЯреА рдПрдВрдЯрд░ рдХрд░реЗрдВ", callback_data=f"custom_{command_type}"),
            #InlineKeyboardButton("ЁЯФД рд╕рд┐рдЯреА рдмрджрд▓реЗрдВ", callback_data=f"edit_{command_type}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# ЁЯФД рдЗрдирд▓рд╛рдЗрди рдмрдЯрди рд╣реИрдВрдбрд▓рд░ (рд╕рднреА рдХрдорд╛рдВрдбреНрд╕ рдХреЗ рд▓рд┐рдП)
async def handle_city_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    # рдХрд╕реНрдЯрдо рд╕рд┐рдЯреА рдпрд╛ рдПрдбрд┐рдЯ рдореЛрдб
    if data.startswith(('custom_', 'edit_')):
        command_type = data.split('_')[1]
        await query.edit_message_text(f"тЬНя╕П рдХреГрдкрдпрд╛ {command_type} рдХреЗ рд▓рд┐рдП рд╕рд┐рдЯреА рдХрд╛ рдирд╛рдо рдЯрд╛рдЗрдк рдХрд░реЗрдВ:")
        context.user_data["awaiting_city_for"] = command_type
        return

    command_type, city = data.split('_', 1)
    user_id = query.from_user.id

    if command_type == "weather":
        weather = get_weather(city)
        reply = f"{weather}\n\nЁЯУ░ *рдЯреЙрдк рдиреНрдпреВрдЬрд╝:*\n{get_news()}" if "тЪая╕П" not in weather else weather
        await query.edit_message_text(reply, parse_mode="Markdown")

    elif command_type == "subscribe":
        if is_subscribed(user_id):
            await query.edit_message_text("тД╣я╕П рдЖрдк рдкрд╣рд▓реЗ рд╕реЗ рд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рд╣реИрдВ! рд╢рд╣рд░ рдмрджрд▓рдиреЗ рдХреЗ рд▓рд┐рдП /updatecity рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред")
        else:
            add_subscriber(user_id, city)
            await query.edit_message_text(f"тЬЕ {city} рдХреЗ рд▓рд┐рдП рд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рд╣реЛ рдЧрдП!\nрдЕрдм рдЖрдкрдХреЛ рд░реЛрдЬрд╝рд╛рдирд╛ рдЕрдкрдбреЗрдЯ рдорд┐рд▓реЗрдВрдЧреЗред")

    elif command_type == "updatecity":
        if not is_subscribed(user_id):
            await query.edit_message_text("тЭМ рдкрд╣рд▓реЗ /subscribe рдХрд░реЗрдВред")
        else:
            update_city(user_id, city)
            await query.edit_message_text(f"тЬЕ рдЖрдкрдХреА рд╕рд┐рдЯреА рдЕрдкрдбреЗрдЯ рдХреА рдЧрдИ: {city}")

    elif command_type == "alert":
        alerts = check_weather_alerts(city)
        alert_msg = f"ЁЯЪи {city} рдХреЗ рд▓рд┐рдП рдЕрд▓рд░реНрдЯ:\n{alerts}" if alerts else f"тЬЕ {city} рдореЗрдВ рдХреЛрдИ рдЪреЗрддрд╛рд╡рдиреА рдирд╣реАрдВред"
        await query.edit_message_text(alert_msg)

    elif command_type == "setalert":
        await query.edit_message_text(f"тЪЩя╕П рдЕрд▓рд░реНрдЯ рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдХреЗ рд▓рд┐рдП /setalert <рдкреНрд░рдХрд╛рд░> <on/off> рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред")

# тЬЕ START
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ЁЯЩП рдирдорд╕реНрддреЗ! рдореИрдВ рд╣реВрдБ *MausamAurKhabarBot*, рдЖрдкрдХрд╛ рдореМрд╕рдо рдФрд░ рдЦрдмрд░реЛрдВ рдХрд╛ рд╕рд╛рдереАред\n\n"
        "ЁЯУН рдЕрдм рдЖрдк рдХрд┐рд╕реА рднреА рдХрдорд╛рдВрдб (/weather, /subscribe, рдЖрджрд┐) рдкрд░ рд╕рд┐рдЯреА рдЪреБрди рд╕рдХрддреЗ рд╣реИрдВ!\n\n"
        "тЪб рдЙрдкрдпреЛрдЧреА рдХрдорд╛рдВрдбреНрд╕:\n"
        "тАв /weather - рдореМрд╕рдо рдЬрд╛рдирдХрд╛рд░реА\n"
        "тАв /news - рддрд╛рдЬрд╝рд╛ рдЦрдмрд░реЗрдВ\n"
        "тАв /today - рдЖрдЬ рдХреА рддрд╛рд░реАрдЦ рдФрд░ рддрдереНрдп\n"
        "тАв /subscribe - рд░реЛрдЬрд╝рд╛рдирд╛ рдЕрдкрдбреЗрдЯ\n"
        "тАв /updatecity - рд╢рд╣рд░ рдмрджрд▓реЗрдВ\n"
        "тАв /unsubscribe - рдЕрдирд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рдХрд░реЗрдВ\n"
        "тАв /alert - рдореМрд╕рдо рдЪреЗрддрд╛рд╡рдиреА\n"
        "тАв /setalert - рдЕрд▓рд░реНрдЯ рд╕реЗрдЯрд┐рдВрдЧ\n"
        "тАв /help - рд╕рднреА рдХрдорд╛рдВрдбреНрд╕",
        parse_mode="Markdown"
    )

# тЬЕ WEATHER
async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ЁЯМжя╕П рдХрд┐рд╕ рд╢рд╣рд░ рдХрд╛ рдореМрд╕рдо рдЪрд╛рд╣рд┐рдП?", reply_markup=get_city_keyboard("weather"))

# тЬЕ SUBSCRIBE
async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ЁЯУМ рд░реЛрдЬрд╝рд╛рдирд╛ рдЕрдкрдбреЗрдЯ рдХреЗ рд▓рд┐рдП рд╕рд┐рдЯреА рдЪреБрдиреЗрдВ:", reply_markup=get_city_keyboard("subscribe"))

# тЬЕ ALERT
async def alert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ЁЯЪи рдХрд┐рд╕ рд╢рд╣рд░ рдХреЗ рдЕрд▓рд░реНрдЯ рдЪреЗрдХ рдХрд░реЗрдВ?", reply_markup=get_city_keyboard("alert"))

# тЬЕ UPDATE CITY
async def update_city_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ЁЯФД рдХрд┐рд╕ рд╢рд╣рд░ рдореЗрдВ рдмрджрд▓рд╛рд╡ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?", reply_markup=get_city_keyboard("updatecity"))

# тЬЕ UNSUBSCRIBE
async def unsubscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
        # тЬЕ рдирдпрд╛ рдЪреЗрдХ: рдЕрдЧрд░ рдпреВрдЬрд░ рдкрд╣рд▓реЗ рд╕реЗ рдЕрдирд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рд╣реИ
    if not is_subscribed(user_id):
        await update.message.reply_text("тД╣я╕П рдЖрдк рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рдЕрдирд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рд╣реИрдВ! рд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП /subscribe рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред")
        return

    keyboard = [
        [InlineKeyboardButton("тЬЕ рд╣рд╛рдБ, рдЕрдирд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рдХрд░реЗрдВ", callback_data="unsubscribe_yes")],
        [InlineKeyboardButton("тЭМ рдирд╣реАрдВ", callback_data="unsubscribe_no")]
    ]
    await update.message.reply_text("тЭМ рдХреНрдпрд╛ рдЖрдк рд╡рд╛рдХрдИ рдЕрдирд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?", reply_markup=InlineKeyboardMarkup(keyboard))

# тЬЕ HANDLE TEXT INPUT
async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    city = update.message.text.strip()
    command_type = context.user_data.get("awaiting_city_for")

    if command_type == "weather":
        weather = get_weather(city)
        await update.message.reply_text(weather, parse_mode="Markdown")
    elif command_type == "subscribe":
        add_subscriber(user_id, city)
        await update.message.reply_text(f"тЬЕ {city} рдХреЗ рд▓рд┐рдП рд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рд╣реЛ рдЧрдП!")
    elif command_type == "updatecity":
        update_city(user_id, city)
        await update.message.reply_text(f"тЬЕ рдЖрдкрдХреА рд╕рд┐рдЯреА рдЕрдкрдбреЗрдЯ рдХреА рдЧрдИ: {city}")
    elif command_type == "alert":
        alerts = check_weather_alerts(city)
        await update.message.reply_text(f"ЁЯЪи рдЕрд▓рд░реНрдЯ: {alerts}" if alerts else f"тЬЕ {city} рдореЗрдВ рдХреЛрдИ рдЪреЗрддрд╛рд╡рдиреА рдирд╣реАрдВред")

    context.user_data.pop("awaiting_city_for", None)

# тЬЕ TODAY рдФрд░ NEWS
async def send_today_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ist = zoneinfo.ZoneInfo("Asia/Kolkata")
    now = datetime.datetime.now(tz=ist)
    date_str = now.strftime("%d-%m-%Y %H:%M:%S")
    await update.message.reply_text(f"ЁЯУЕ рдЖрдЬ рдХреА рддрд╛рд░реАрдЦ: {date_str}\n\n{get_fun_fact()}")

async def send_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(get_news())

# тЬЕ HELP
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ЁЯдЦ рд╕рднреА рдХрдорд╛рдВрдбреНрд╕:\n\n"
        "ЁЯУН /weather - рдореМрд╕рдо рд░рд┐рдкреЛрд░реНрдЯ\n"
        "ЁЯУ░ /news - рдЯреЙрдк 3 рдЦрдмрд░реЗрдВ\n"
        "ЁЯУЕ /today - рддрд╛рд░реАрдЦ + рд░реЛрдЪрдХ рддрдереНрдп\n"
        "ЁЯУМ /subscribe - рдСрдЯреЛ рдЕрдкрдбреЗрдЯ\n"
        "ЁЯФД /updatecity - рд▓реЛрдХреЗрд╢рди рдмрджрд▓реЗрдВ\n"
        "тЭМ /unsubscribe - рдЕрдирд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм\n"
        "ЁЯЪи /alert - рдореМрд╕рдо рдЪреЗрддрд╛рд╡рдиреА\n"
        "тЪЩя╕П /setalert - рдЕрд▓рд░реНрдЯ рд╕реЗрдЯрд┐рдВрдЧ\n"
        "ЁЯУЦ /help - рд╕рд╣рд╛рдпрддрд╛"
    )

# ЁЯФД UNSUBSCRIBE рдХрдиреНрдлрд░реНрдореЗрд╢рди
async def handle_unsubscribe_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "unsubscribe_yes":
        unsubscribe(query.from_user.id)
        await query.edit_message_text("тЬЕ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЕрдирд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рд╣реЛ рдЧрдП!")
    else:
        await query.edit_message_text("тЭМ рдЕрдирд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рдХреИрдВрд╕рд▓ рдХрд┐рдпрд╛ рдЧрдпрд╛ред")

# тЬЕ SET ALERT PREFERENCES
async def set_alert_prefs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args or len(context.args) != 2:
        await update.message.reply_text("тЪЩя╕П рдЙрдкрдпреЛрдЧ:/setalert <рдкреНрд░рдХрд╛рд░> <on/off>\n\nрдЙрджрд╛рд╣рд░рдг: /setalert rain off\n\n рдЙрдкрд▓рдмреНрдз рдЕрд▓рд░реНрдЯ:\n-rain\n-storm\n-heat\n-colds\n-snow")
        return

    alert_type = context.args[0].lower()
    status_arg = context.args[1].lower()
    
    if alert_type not in ['rain', 'storm', 'heat', 'cold', 'snow']:
        await update.message.reply_text("тЪая╕П рдЕрд▓рд░реНрдЯ рдкреНрд░рдХрд╛рд░ рдЕрдорд╛рдиреНрдп рд╣реИред rain, storm, heat, cold, рдпрд╛ snow рдореЗрдВ рд╕реЗ рдЪреБрдиреЗрдВред")
        return

    if status_arg not in ['on', 'off']:
        await update.message.reply_text("тЪая╕П рдХреГрдкрдпрд╛ on рдпрд╛ off рдореЗрдВ рд╕реЗ рдЪреБрдиреЗрдВред")
        return

    status = True if status_arg == "on" else False
    success = set_alert_preference(user_id, alert_type, status)

    if success:
        await update.message.reply_text(f"тЬЕ {alert_type} рдЕрд▓рд░реНрдЯ рдЕрдм {'рдЪрд╛рд▓реВ' if status else 'рдмрдВрдж'} рд╣реИред")
    else:
        await update.message.reply_text("тЭМ рдЕрд▓рд░реНрдЯ рд╕реЗрдЯ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред рдкрд╣рд▓реЗ /subscribe рдХрд░реЗрдВред")

# тЬЕ STATUS

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    profile = get_user_profile(user_id)

    if not profile:
        await update.message.reply_text("тД╣я╕П рдЖрдк рдХрд┐рд╕реА рднреА рдЕрдкрдбреЗрдЯ рдХреЗ рд▓рд┐рдП рд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рдирд╣реАрдВ рд╣реИрдВред")
        return

    city = profile.get('city', 'тЭУ рдЕрдЬреНрдЮрд╛рдд')
    alert_prefs = profile.get('prefs', {})

    alert_lines = []
    for alert_type, status in alert_prefs.items():
        emoji = "тЬЕ" if status else "тЭМ"
        name_map = {
            "rain": "рдмрд╛рд░рд┐рд╢",
            "storm": "рддреВрдлрд╛рди",
            "heat": "рдЧрд░реНрдореА",
            "cold": "рдардВрдб",
            "snow": "рдмрд░реНрдлрдмрд╛рд░реА"
        }
        alert_lines.append(f"{emoji} {name_map.get(alert_type, alert_type)}")

    alert_text = "\n".join(alert_lines) if alert_lines else "тЭМ рдХреЛрдИ рдЕрд▓рд░реНрдЯ рдкреНрд░реЗрдлрд░реЗрдВрд╕ рдирд╣реАрдВ рдорд┐рд▓реАред"

    await update.message.reply_text(
        f"ЁЯСд *рдЖрдкрдХреА рдкреНрд░реЛрдлрд╛рдЗрд▓:*\n\n"
        f"ЁЯУН рд╢рд╣рд░: *{city}*\n"
        f"ЁЯФФ рдЕрд▓рд░реНрдЯ рдкреНрд░реЗрдлрд░реЗрдВрд╕:\n{alert_text}",
        parse_mode="Markdown"
    )

# тЬЕ Brodcast

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id != ADMIN_ID:
        await update.message.reply_text("тЭМ рдЖрдкрдХреЗ рдкрд╛рд╕ рдпрд╣ рдХрдорд╛рдВрдб рдЪрд▓рд╛рдиреЗ рдХреА рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИред")
        return

    if not context.args:
        await update.message.reply_text("тЪая╕П рдЙрдкрдпреЛрдЧ:\n/broadcast <рд╕рдВрджреЗрд╢>")
        return

    message = "ЁЯУв " + " ".join(context.args)
    subscribers = get_all_subscribers()
    success_count = 0

    for uid, _ in subscribers:
        try:
            await context.bot.send_message(chat_id=uid, text=message)
            success_count += 1
        except Exception as e:
            print(f"тЭМ Cannot message user {uid}: {e}")

    await update.message.reply_text(f"тЬЕ рд╕рдВрджреЗрд╢ {success_count} рдпреВрдЬрд╝рд░реНрд╕ рдХреЛ рднреЗрдЬрд╛ рдЧрдпрд╛ред")


# тЮХ HANDLERS
def add_handlers(application):
    application.add_handler(CallbackQueryHandler(handle_city_selection, pattern="^(weather|subscribe|updatecity|alert)_"))
    application.add_handler(CallbackQueryHandler(handle_unsubscribe_confirmation, pattern="^unsubscribe_"))
    application.add_handler(CallbackQueryHandler(handle_city_selection, pattern="^custom_|edit_"))
