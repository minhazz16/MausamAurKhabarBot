from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from weather import get_weather, check_weather_alerts
from news import get_news
import random
from subscriptions import add_subscriber, update_city, unsubscribe, is_subscribed, get_user_prefs, set_alert_preference
import datetime
import json

# ЁЯОЙ Fun Facts
def load_fun_facts():
    try:
        with open('fun_facts.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"тЪая╕П Fun facts рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")
        return ["ЁЯМЯ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рддрдереНрдп: рд╕реАрдЦрддреЗ рд░рд╣рдирд╛ рдЬрд╛рд░реА рд░рдЦреЗрдВ!"]

def get_fun_fact():
    return random.choice(load_fun_facts())

# тЬЕ START
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ЁЯЩП рдирдорд╕реНрддреЗ! рдореИрдВ рд╣реВрдБ *MausamAurKhabarBot*, рдЖрдкрдХрд╛ рдореМрд╕рдо рдФрд░ рдЦрдмрд░реЛрдВ рдХрд╛ рд╕рд╛рдереАред\n\n"
        "ЁЯУН рдЕрдкрдиреЗ рд╢рд╣рд░ рдХрд╛ рдореМрд╕рдо рдЬрд╛рдирд┐рдП\n"
        "ЁЯУ░ рджреЗрд╢-рджреБрдирд┐рдпрд╛ рдХреА рдЯреЙрдк рдиреНрдпреВрдЬрд╝ рдкрдврд╝рд┐рдП\n"
        "ЁЯОЙ рд░реЛрдЬрд╝рд╛рдирд╛ рдордЬреЗрджрд╛рд░ рддрдереНрдп рдкрд╛рдЗрдП!\n\n"
        "тЪб рдЙрдкрдпреЛрдЧреА рдХрдорд╛рдВрдбреНрд╕:\n"
        "тАв /weather [рд╢рд╣рд░] - рдореМрд╕рдо рдЬрд╛рдирдХрд╛рд░реА\n"
        "тАв /news - рддрд╛рдЬрд╝рд╛ рдЦрдмрд░реЗрдВ\n"
        "тАв /today - рдЖрдЬ рдХреА рддрд╛рд░реАрдЦ рдФрд░ рддрдереНрдп\n"
        "тАв /subscribe [рд╢рд╣рд░] - рд░реЛрдЬрд╝рд╛рдирд╛ рдЕрдкрдбреЗрдЯ\n"
        "тАв /updatecity [рдирдпрд╛ рд╢рд╣рд░] - рд╢рд╣рд░ рдмрджрд▓реЗрдВ\n"
        "тАв /unsubscribe - рдЕрдирд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рдХрд░реЗрдВ\n"
        "тАв /alert [рд╢рд╣рд░] - рдореМрд╕рдо рдЪреЗрддрд╛рд╡рдиреА\n"
        "тАв /setalert [рдкреНрд░рдХрд╛рд░] [on/off] - рдЕрд▓рд░реНрдЯ рд╕реЗрдЯрд┐рдВрдЧ\n"
        "тАв /selectcity - рд╢рд╣рд░ рдЪреБрдиреЗрдВ рдмрдЯрди рд╕реЗ\n"
        "тАв /help - рд╕рднреА рдХрдорд╛рдВрдбреНрд╕\n\n"
        "ЁЯЪА рдирдП рдлреАрдЪрд░реНрд╕ рдЖрдиреЗ рд╡рд╛рд▓реЗ рд╣реИрдВ!",
        parse_mode="Markdown"
    )

# тЬЕ WEATHER + NEWS
async def send_weather_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("рдХреГрдкрдпрд╛ рд╢рд╣рд░ рдХрд╛ рдирд╛рдо рд▓рд┐рдЦреЗрдВред\nрдЙрджрд╛рд╣рд░рдг: /weather Mehsi")
        return
    city = " ".join(context.args)
    weather = get_weather(city)
    if "тЪая╕П" in weather:
        await update.message.reply_text(weather)
    else:
        reply = (
            f"{weather}\n\n"
            f"{get_fun_fact()}\n\n"
            f"ЁЯУ░ *рдЯреЙрдк рдиреНрдпреВрдЬрд╝:*\n{get_news()}"
        )
        await update.message.reply_text(reply, parse_mode="Markdown")

# тЬЕ NEWS
async def send_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    news = get_news()
    await update.message.reply_text(news)

# тЬЕ TODAY
async def send_today_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.datetime.now()
    date_str = now.strftime("%d-%m-%Y %H:%M:%S")
    await update.message.reply_text(
        f"ЁЯУЕ рдЖрдЬ рдХреА рддрд╛рд░реАрдЦ: {date_str}\n\n{get_fun_fact()}"
    )

# тЬЕ HELP
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ЁЯдЦ рд╕рднреА рдХрдорд╛рдВрдбреНрд╕:\n\n"
        "ЁЯУН /weather [рд╢рд╣рд░] - рдореМрд╕рдо рд░рд┐рдкреЛрд░реНрдЯ\n"
        "ЁЯУ░ /news - рдЯреЙрдк 3 рдЦрдмрд░реЗрдВ\n"
        "ЁЯУЕ /today - рддрд╛рд░реАрдЦ + рд░реЛрдЪрдХ рддрдереНрдп\n"
        "ЁЯУМ /subscribe [рд╢рд╣рд░] - рдСрдЯреЛ рдЕрдкрдбреЗрдЯ\n"
        "ЁЯФД /updatecity [рдирдпрд╛ рд╢рд╣рд░] - рд▓реЛрдХреЗрд╢рди рдмрджрд▓реЗрдВ\n"
        "тЭМ /unsubscribe - рдЕрдирд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм\n"
        "ЁЯЪи /alert [рд╢рд╣рд░] - рдореМрд╕рдо рдЪреЗрддрд╛рд╡рдиреА\n"
        "тЪЩя╕П /setalert [рдкреНрд░рдХрд╛рд░] [on/off] - рдЕрд▓рд░реНрдЯ рд╕реЗрдЯрд┐рдВрдЧ\n"
        "ЁЯУН /selectcity - рд╢рд╣рд░ рдЪрдпрди рдмрдЯрди\n"
        "ЁЯУЦ /help - рд╕рд╣рд╛рдпрддрд╛"
    )

# тЬЕ SUBSCRIBE
async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text("рдХреГрдкрдпрд╛ рд╢рд╣рд░ рдХрд╛ рдирд╛рдо рдмрддрд╛рдПрдВред\nрдЙрджрд╛рд╣рд░рдг: /subscribe Patna")
        return
    city = " ".join(context.args)
    if is_subscribed(user_id):
        await update.message.reply_text("тД╣я╕П рдЖрдк рдкрд╣рд▓реЗ рд╕реЗ рд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рд╣реИрдВ!\nрд╢рд╣рд░ рдмрджрд▓рдиреЗ рдХреЗ рд▓рд┐рдП /updatecity рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред")
        return
    if add_subscriber(user_id, city):
        await update.message.reply_text(
            f"тЬЕ {city} рдХреЗ рд▓рд┐рдП рд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рд╣реЛ рдЧрдП!\nрдЕрдм рдЖрдкрдХреЛ рд░реЛрдЬрд╝рд╛рдирд╛:\nтАв рдореМрд╕рдо\nтАв рдЦрдмрд░реЗрдВ\nтАв рд░реЛрдЪрдХ рддрдереНрдп"
        )
    else:
        await update.message.reply_text("тЪая╕П рддреНрд░реБрдЯрд┐: рд╕рдмреНрд╕рдХреНрд░рд┐рдкреНрд╢рди рдЕрд╕рдлрд▓")

# тЬЕ UPDATE CITY
async def update_city_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text("рдХреГрдкрдпрд╛ рдирдпрд╛ рд╢рд╣рд░ рдмрддрд╛рдПрдВред\nрдЙрджрд╛рд╣рд░рдг: /updatecity Gaya")
        return
    new_city = " ".join(context.args)
    if not is_subscribed(user_id):
        await update.message.reply_text("тЭМ рдЖрдк рд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рдирд╣реАрдВ рд╣реИрдВ!\nрдкрд╣рд▓реЗ /subscribe рдХрд░реЗрдВред")
        return
    if update_city(user_id, new_city):
        await update.message.reply_text(f"тЬЕ рдЕрдм рдЖрдкрдХреЛ {new_city} рдХрд╛ рдореМрд╕рдо рдорд┐рд▓реЗрдЧрд╛ред")
    else:
        await update.message.reply_text("тЪая╕П рддреНрд░реБрдЯрд┐: рдЕрдкрдбреЗрдЯ рдЕрд╕рдлрд▓")

# тЬЕ UNSUBSCRIBE
async def unsubscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_subscribed(user_id):
        await update.message.reply_text("тД╣я╕П рдЖрдк рдкрд╣рд▓реЗ рд╕реЗ рдЕрдирд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рд╣реИрдВред")
        return
    if unsubscribe(user_id):
        await update.message.reply_text("тЬЕ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЕрдирд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рд╣реЛ рдЧрдП!")
    else:
        await update.message.reply_text("тЪая╕П рддреНрд░реБрдЯрд┐: рдЕрдирд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рдЕрд╕рдлрд▓")

# тЬЕ ALERT CHECK
async def check_alert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("рдХреГрдкрдпрд╛ рд╢рд╣рд░ рдХрд╛ рдирд╛рдо рд▓рд┐рдЦреЗрдВред рдЙрджрд╛рд╣рд░рдг: /alert Muzaffarpur")
        return
    city = " ".join(context.args)
    alerts = check_weather_alerts(city)
    if alerts:
        await update.message.reply_text(f"ЁЯЪи {city} рдХреЗ рд▓рд┐рдП рдЕрд▓рд░реНрдЯ:\n{alerts}")
    else:
        await update.message.reply_text(f"тЬЕ {city} рдореЗрдВ рдХреЛрдИ рд╡рд┐рд╢реЗрд╖ рдЪреЗрддрд╛рд╡рдиреА рдирд╣реАрдВ рд╣реИред")

# тЬЕ SET ALERT PREFERENCE
async def set_alert_prefs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_subscribed(user_id):
        await update.message.reply_text("тЭМ рдкрд╣рд▓реЗ /subscribe рдХрд░реЗрдВ")
        return
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "тЪая╕П рдЙрдкрдпреЛрдЧ: /setalert <alert_type> <on/off>\n"
            "рдЙрджрд╛рд╣рд░рдг: /setalert rain on\n\n"
            "рдЙрдкрд▓рдмреНрдз рдЕрд▓рд░реНрдЯ:\n- rain\n- storm\n- heat\n- cold\n- snow"
        )
        return
    alert_type = context.args[0].lower()
    status = context.args[1].lower() == 'on'
    valid_alerts = ['rain', 'storm', 'heat', 'cold', 'snow']
    if alert_type not in valid_alerts:
        await update.message.reply_text("тЭМ рдЕрдорд╛рдиреНрдп рдЕрд▓рд░реНрдЯ рдЯрд╛рдЗрдкред")
        return
    if set_alert_preference(user_id, alert_type, status):
        status_hi = "рдЪрд╛рд▓реВ" if status else "рдмрдВрдж"
        await update.message.reply_text(f"тЬЕ {alert_type} рдЕрд▓рд░реНрдЯ {status_hi} рдХрд┐рдпрд╛ рдЧрдпрд╛")
    else:
        await update.message.reply_text("тЪая╕П рд╕реЗрдЯрд┐рдВрдЧ рд╕реЗрд╡ рдирд╣реАрдВ рд╣реБрдИ")

# тЬЕ NEW: SELECT CITY (INLINE BUTTON)
async def select_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("ЁЯМЖ Patna", callback_data='city_Patna')],
        [InlineKeyboardButton("ЁЯПЩя╕П Muzaffarpur", callback_data='city_Muzaffarpur')],
        [InlineKeyboardButton("ЁЯПЮя╕П Gaya", callback_data='city_Gaya')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рд╢рд╣рд░ рдЪреБрдиреЗрдВ:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith('city_'):
        city = data.split('_')[1]
        await query.edit_message_text(
            text=f"тЬЕ рдЖрдкрдиреЗ рдЪреБрдирд╛: *{city}*\nрдЕрдм рдЖрдк `/weather {city}` рд╕реЗ рдореМрд╕рдо рдЬрд╛рди рд╕рдХрддреЗ рд╣реИрдВред",
            parse_mode="Markdown"
        )
